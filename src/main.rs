#![allow(unused_imports)]
#![allow(dead_code)]
#![allow(unused_variables)]

extern crate csv;
extern crate heck;
extern crate itertools;

use std::fs::File;
use std::io::Read;
use std::io::Write;

mod codegen;
mod records;

use codegen::*;
use records::*;

fn main() {
    let file_in = File::open("data.csv").expect("Unable to open file to read.");
    let file_out = File::create("AutoGenerated.wurst").expect("Unable to open file to write.");

    let mut reader = csv::ReaderBuilder::new()
        .flexible(true)
        .has_headers(false)
        .from_reader(file_in);

    let mut generator = CodeGenerator::new(file_out);

    for (count, record) in reader.records().enumerate() {
        if let Ok(record) = record {
            print!("{}: Found record. ", count);
            let parsed_record = Record::from_record(&record);

            if let Some(parsed_record) = parsed_record {
                print!("Parsed. {:?}", parsed_record);
                generator.process_record(parsed_record);
            } else {
                print!("Couldn't parse. {:?}", record);
            }
        } else {
            print!("{}: No record found.", count);
        }

        println!();
    }

    generator.emit();
}
