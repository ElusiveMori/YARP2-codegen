#![allow(unused_imports)]
#![allow(dead_code)]
#![feature(nll)]

use std::fs::File;
use std::io::Read;
use std::io::Write;

mod yarp_data;
mod yarp_meta;

use crate::yarp_data::YarpData;
use crate::yarp_meta::*;
use serde_yaml;
use std::env;
use liquid::ParserBuilder;

fn process_data(path: &str) {
    let mut file_in = File::open(path).expect("Unable to open file to read.");
    let mut file_out = File::create("AutoGenerated.wurst").expect("Unable to open file to write.");

    let yarp_data: YarpData = serde_yaml::from_reader(&mut file_in).unwrap();

    let meta = transform_yarp_data(&yarp_data);
    let context = liquid_context(&meta).into_object().unwrap();

    let template = ParserBuilder::with_liquid().build().unwrap().parse(include_str!("codegen_template.liquid")).unwrap();
    write!(file_out, "{}", template.render(&context).unwrap()).unwrap();
}

fn main() {
    let args: Vec<String> = env::args().collect();
    process_data(&args[1]);
}
